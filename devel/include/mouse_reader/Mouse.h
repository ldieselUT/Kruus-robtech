// Generated by gencpp from file mouse_reader/Mouse.msg
// DO NOT EDIT!


#ifndef MOUSE_READER_MESSAGE_MOUSE_H
#define MOUSE_READER_MESSAGE_MOUSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mouse_reader
{
template <class ContainerAllocator>
struct Mouse_
{
  typedef Mouse_<ContainerAllocator> Type;

  Mouse_()
    : x_movement(0)
    , y_movement(0)
    , key_name()
    , key_pressed(false)  {
    }
  Mouse_(const ContainerAllocator& _alloc)
    : x_movement(0)
    , y_movement(0)
    , key_name(_alloc)
    , key_pressed(false)  {
  (void)_alloc;
    }



   typedef int16_t _x_movement_type;
  _x_movement_type x_movement;

   typedef int16_t _y_movement_type;
  _y_movement_type y_movement;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _key_name_type;
  _key_name_type key_name;

   typedef uint8_t _key_pressed_type;
  _key_pressed_type key_pressed;




  typedef boost::shared_ptr< ::mouse_reader::Mouse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mouse_reader::Mouse_<ContainerAllocator> const> ConstPtr;

}; // struct Mouse_

typedef ::mouse_reader::Mouse_<std::allocator<void> > Mouse;

typedef boost::shared_ptr< ::mouse_reader::Mouse > MousePtr;
typedef boost::shared_ptr< ::mouse_reader::Mouse const> MouseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mouse_reader::Mouse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mouse_reader::Mouse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mouse_reader

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'mouse_reader': ['/home/tudeng/Kruus-robtech/src/mouse_reader/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mouse_reader::Mouse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mouse_reader::Mouse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mouse_reader::Mouse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mouse_reader::Mouse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mouse_reader::Mouse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mouse_reader::Mouse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mouse_reader::Mouse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8d3171768b3aa775674c4585e9dc2c0b";
  }

  static const char* value(const ::mouse_reader::Mouse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8d3171768b3aa775ULL;
  static const uint64_t static_value2 = 0x674c4585e9dc2c0bULL;
};

template<class ContainerAllocator>
struct DataType< ::mouse_reader::Mouse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mouse_reader/Mouse";
  }

  static const char* value(const ::mouse_reader::Mouse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mouse_reader::Mouse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Key code as defined in linux/inupt.h\n\
int16 x_movement\n\
int16 y_movement\n\
\n\
# Key name string as defined in evtest, see http://elinux.org/images/9/93/Evtest.c\n\
string key_name\n\
\n\
# 'True' if key was pressed, 'False' otherwise\n\
bool key_pressed\n\
";
  }

  static const char* value(const ::mouse_reader::Mouse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mouse_reader::Mouse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_movement);
      stream.next(m.y_movement);
      stream.next(m.key_name);
      stream.next(m.key_pressed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Mouse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mouse_reader::Mouse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mouse_reader::Mouse_<ContainerAllocator>& v)
  {
    s << indent << "x_movement: ";
    Printer<int16_t>::stream(s, indent + "  ", v.x_movement);
    s << indent << "y_movement: ";
    Printer<int16_t>::stream(s, indent + "  ", v.y_movement);
    s << indent << "key_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.key_name);
    s << indent << "key_pressed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.key_pressed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MOUSE_READER_MESSAGE_MOUSE_H
